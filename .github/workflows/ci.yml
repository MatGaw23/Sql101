name: SQL Learning Game CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.py') }}
          restore-keys: ${{ runner.os }}-conan-

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure Conan
        run: |
          conan profile detect --force

      - name: Install Dependencies with Conan
        run: |
          mkdir -p build
          conan install . --output-folder=build --build=missing
        shell: pwsh

      - name: Configure CMake
        run: |
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        shell: pwsh

      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }}

      - name: Run Tests
        working-directory: build
        run: ctest -C ${{ matrix.build_type }} --output-on-failure

      # - name: Run application (smoke test)
      #   working-directory: build
      #   run: ./build/bin/sql_game

  static_analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run clang-tidy
        uses: cpp-linter/cpp-linter-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          tidy-checks: true
          files-changed-only: true
          thread-comments: true
          ignore: build
          database: build/compile_commands.json
          extra-args: -std=c++23

  code_formatting:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run clang-format
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: "14"
          check-path: "include src tests"
          exclude-regex: "(third_party|build)"
